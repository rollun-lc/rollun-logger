<?php
/**
 * Created by PhpStorm.
 * User: itprofessor02
 * Date: 08.03.19
 * Time: 13:02
 */

namespace rollun\test\logger;

use PHPUnit\Framework\TestCase;
use rollun\logger\Formatter\FluentdFormatter;

class FluentdFormatterTest extends TestCase
{
    /**
     * @var FluentdFormatter
     */
    private $formatter;

    public function setUp(): void
    {
        $this->formatter = new FluentdFormatter();
        parent::setUp(); // TODO: Change the autogenerated stub
    }

    public function formatDataProvider()
    {
        return [
            [
                [
                    'timestamp' => time(),
                    'priority' => 1,
                    'level' => 'debug',
                    'message' => 'test message',
                    'context' => [],
                ],
                json_encode(['timestamp' => time(), 'priority' => 1, 'level' => 'debug', 'message' => 'test message'])
            ],
            [
                [
                    'timestamp' => time(),
                    'priority' => 1,
                    'level' => 'debug',
                    'message' => 'test message',
                    'context' => [
                        'a' => '1',
                        'b' => '2',
                        'c' => [
                            'qqq' => 'qwe'
                        ],
                    ],
                ],
                json_encode([
                    'timestamp' => time(), 'priority' => 1, 'level' => 'debug', 'message' => 'test message',
                    'context.a' => '1',
                    'context.b' => '2',
                    'context.c' => [
                        'qqq' => 'qwe'
                    ],

                ])
            ],
            [
                [
                    'timestamp' => time(),
                    'priority' => 1,
                    'level' => 'debug',
                    'message' => 'test message',
                    'context' => [
                        'a' => '1',
                        'b' => '2',
                        'c' => [
                            'qqq' => 'qwe',
                            'empty' => [],
                            'not_empty' => [
                                'a' => '1',
                                'b' => '2',
                            ]
                        ],
                    ],
                ],
                json_encode([
                    'timestamp' => time(), 'priority' => 1, 'level' => 'debug', 'message' => 'test message',
                    'context.a' => '1',
                    'context.b' => '2',
                    'context.c' => [
                        'qqq' => 'qwe',
                        'not_empty' => [
                            'a' => '1',
                            'b' => '2',
                        ]
                    ],

                ])
            ],

        ];
    }

    /**
     * @dataProvider formatDataProvider
     * @param array $event
     * @param string $expectedResult
     */
    public function testFormat(array $event, string $expectedResult)
    {
        $this->assertEquals($expectedResult, $this->formatter->format($event));
    }
}
